Допущения:
# Все таблицы, сущности которых будут наследоваться от Lms_Item_Abstract должны иметь первичный ключ (допустим составной ключ)
# Первичный ключ сохраненной записи запрещено изменять извне. Он должен либо передаваться в конструкторе, либо генерироваться при вставке в БД
# Несохраненная запись не имеет отражения в хранилище данных, не может иметь зависимостей. 
# Перед работой с зависимостями несохраненная запись сохраняется 

Соглашение об наименованиях:
PK - первичный ключ в виде скалярного выражения (для однополевых primary key),
     либо в виде массива ('поле1'=>'значение','поле2'=>'значение',...) для multikey

scalarPK - скаляризованный PK. Для multikey скаляризуется например как 'xxx-yyy-zzz'
           (везде используется единый скаляризатор)
pre<XYZ>, post<XYZ> - виртуальные (пустые) методы для последующей реализации в конкретных
                  сущностях до и после операций XYZ
                  
_xyz - приватные свойства и методы
xyz - публичные свойства и методы

Класс Lms_Item_Registry избавляет от необходимости кешировать данные, т.к.
поддерживает предзагрузку предположительно необходимых в будущем данных. Например,
мы предварительно делаем запрос SELECT * FROM users, заносим полученные данные
в Lms_Item_Registry, а затем где-то по тексту вызываем:
user = Lms_Item::create('User', 5);
тогда при инициализации объект увидит, что данные с id=5 уже есть в Lms_Item_Registry
и не будет вызывать лишний SELECT, а просто вернет ссылку на существующую запись.

Данная технология также обеспечивает, что несколько экземпляров одной и той же записи будут ссылаться на одни и те же данные:
user1 = Lms_Item::create('User', 5);
user2 = Lms_Item::create('User', 5);
user1->setUserName('123');
user1->getUserName()==user2->getUserName()

Для экономии памяти загружаются и инициализируются только те столбцы, которые используются.